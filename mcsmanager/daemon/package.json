name: Download and Release MCSManager

on:
  schedule:
    - cron: '0 0 * * *'  # 每日 UTC 0 点执行
  workflow_dispatch:  # 允许手动触发

jobs:
  download-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install jq
        run: sudo apt-get install -y jq  # 安装 JSON 解析工具
      
      - name: Download MCSManager
        run: |
          echo "正在下载 MCSManager 最新 Linux 版本..."
          if ! wget -O mcsmanager_linux_release.tar.gz https://github.com/MCSManager/MCSManager/releases/latest/download/mcsmanager_linux_release.tar.gz; then
            echo "下载失败，终止工作流"
            exit 1
          fi
          
      - name: Extract MCSManager
        run: |
          echo "正在解压..."
          if ! tar -zxf mcsmanager_linux_release.tar.gz; then
            echo "解压失败，终止工作流"
            exit 1
          fi
          
      - name: Get version from package.json
        id: get_version
        run: |
          # 从 package.json 中提取版本号
          VERSION=$(jq -r '.version' mcsmanager/daemon/package.json)
          echo "从 package.json 提取到的版本号: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Check if release exists
        id: check_release
        run: |
          # 检查该版本号是否已经存在对应的 release
          if gh release view "v${{ steps.get_version.outputs.version }}" > /dev/null 2>&1; then
            echo "版本 v${{ steps.get_version.outputs.version }} 已存在"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "版本 v${{ steps.get_version.outputs.version }} 不存在，准备创建"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Remove source file
        run: |
          echo "正在删除源文件..."
          rm -f mcsmanager_linux_release.tar.gz
          
      - name: Copy lib files
        if: steps.check_release.outputs.exists == 'false'  # 只有需要发布新版本时才执行
        run: |
          echo "正在复制 lib 文件..."
          mkdir -p mcsmanager/daemon/lib
          if [ -f "lib/file_zip_linux_arm" ] && [ -f "lib/pty_linux_arm" ]; then
            cp lib/file_zip_linux_arm mcsmanager/daemon/lib/
            cp lib/pty_linux_arm mcsmanager/daemon/lib/
          else
            echo "lib 目录下的必要文件不存在，终止工作流"
            exit 1
          fi
          
      - name: Compress MCSManager
        if: steps.check_release.outputs.exists == 'false'  # 只有需要发布新版本时才执行
        run: |
          echo "正在压缩 MCSManager..."
          if ! tar -czf mcsmanager_armv7l_release.tar.gz mcsmanager; then
            echo "压缩失败，终止工作流"
            exit 1
          fi
          
      - name: Set up GitHub CLI
        if: steps.check_release.outputs.exists == 'false'  # 只有需要发布新版本时才执行
        uses: cli/setup-gh@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create Release and Upload Asset
        if: steps.check_release.outputs.exists == 'false'  # 只有需要发布新版本时才执行
        run: |
          # 使用从 package.json 读取的版本号
          TAG_NAME="v${{ steps.get_version.outputs.version }}"
          RELEASE_NAME="Release $TAG_NAME"
          
          # 创建 Release
          gh release create "$TAG_NAME" \
            --title "$RELEASE_NAME" \
            --notes "Automatically generated release for MCSManager armv7l build (version $TAG_NAME)" \
            --draft=false \
            --prerelease=false
          
          # 上传资产
          gh release upload "$TAG_NAME" ./mcsmanager_armv7l_release.tar.gz \
            --name "mcsmanager_armv7l_release.tar.gz"
          
      - name: Commit and push changes (if any)
        if: steps.check_release.outputs.exists == 'false'  # 只有需要发布新版本时才执行
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          if ! git diff --quiet; then
            git add .
            git commit -m "Auto update: MCSManager ${{ steps.get_version.outputs.version }}"
            git push
          else
            echo "没有更改需要提交"
          fi
